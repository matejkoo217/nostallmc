var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

var highlightInvalid = function (element, errorClass, validClass) {
    var $element = $(element);
    $element.addClass(errorClass).removeClass(validClass);
    $element.parents('form').find('.button').disableElement();
};
var unhighlightValid = function (element, errorClass, validClass) {
    var $element = $(element);
    $element.addClass(validClass).removeClass(errorClass);
    $element.siblings('.error').remove();
    var form = $element.parents('form');
    if (!form.find('input.error').length) {
        // No more errors, enable button.
        form.find('.button').enableElement();
    }
};

var trackEvent = function(category, action, label, value){
    _gaq.push(['_trackEvent', category, action, label, value]);
};

var flashError = function (message, $target) {
    $('.error.flash').remove();
    var $div = $('<div>', {html: '<p><strong>Error!</strong> ' + message + '</p>'}).addClass('error').addClass('flash');
    var $intro = $target.find('.intro');
    if ($intro.length) {
        $div.insertAfter($intro);
    } else {
        $div.prependTo($target);
    }
    var button = $target.find('.button').show().enableElement();
    var originalText = button.data('originalText');
    if (originalText) {
        button.text(originalText);
    }
    $('#loader').remove();
};
var showError = function (container, message) {
    container.empty().append($('<p>').html(message).addClass('error'));
};

var pathName = window.location.pathname;
if (pathName.indexOf('/login') >= 0 || pathName.indexOf('/register') >= 0 || pathName.indexOf('store') >= 0) {
    if (top.location != self.location) {
        top.location = self.location.href
    }
}

var updateStats = function () {
    if (!isNaN(paidUsersRate) && paidUsersRate > 0) {
        paidUsers += paidUsersRate;

        countTo($('.paid_users'), addThousandSeparator(parseInt(paidUsers)));
    } else {
        return false;
    }
}

var dropdownMenuItem = 0;
var dropdownCloseTimer = 0;
var dropdownOpen = function () {
    dropdownCancelTimer();
    dropdownClose();
    dropdownMenuItem = $(this).find('ul').show();
}

var dropdownClose = function () {
    if (dropdownMenuItem.length > 0) {
        $(dropdownMenuItem[0]).hide();
    }
}

var dropdownTimer = function () {
    dropdownCloseTimer = window.setTimeout(dropdownClose, 500);
}

var dropdownCancelTimer = function () {
    window.clearTimeout(dropdownCloseTimer);
    dropdownCloseTimer = null;
}

var loadTees = function (el, tees) {
    for (i in tees) {
        var tee = $('<a></a>')
            .addClass("tee")
            .attr('href', tees[i].url)
            .css('background-image', tees[i].image.substr(0, 5) == 'https' ? 'url(' + tees[i].image + ')' : 'url(/images/store/tees/' + tees[i].image + ')')
            .html(tees[i].name + (tees[i].isNew ? ' <span style="color:red;font-size:12px;font-weight:bold">NEW!</span>' : ""))
            .insertBefore(el.find('.other'));
        if (i % 4 == 3)
            tee.addClass('last');
    }
}

var oldCodeLength = 0;
var formatCode = function (el) {
    newVal = "";
    for (var i = 0; i < el.val().length; i++) {
        if (newVal.length >= 14) break;
        if (!el.val()[i].match(/[\s-]/))
            newVal += el.val()[i];
        if (newVal.length < 13 && (newVal.length + 1) % 5 == 0) {
            newVal += "-";
        }
    }
    el.val(newVal);
}

var countTo = function (el, val) {
    if (el.text().length != val.length) {
        el.text(val);
        el.css('width', el.width() + 'px').css('display', 'inline-block');
        return false;
    }
    var digits = el.text().split('');
    el.css('width', el.width() + 'px').css('display', 'inline-block');
    el.html("");
    var offset = new Array();
    var digitEles = new Array();
    for (i in digits) {
        var digit = $("<span></span>").text(digits[i]).appendTo(el);
        offset.push(digit.position().left);
        digitEles.push(digit);
    }
    for (i in digitEles) {
        digitEles[i].css({
            top: 0,
            left: offset[i] + "px",
            position: 'absolute'
        })
    }

    var newDigits = val.split('');
    for (i in newDigits) {
        if (newDigits[i] != digits[i]) {
            var newDigit = $('<span></span>').text(newDigits[i]).appendTo(el);
            newDigit.css({
                top: "-10px",
                left: offset[i] + "px",
                position: 'absolute'
            });
            newDigit.animate({
                top: '+=10',
                opacity: 1.0
            }, 200), function () {
                el.html(val)
            };
            digitEles[i].animate({
                top: '+=10',
                opacity: 0.0
            }, 200, function () {
                $(this).remove()
            });
        }
    }

//$($('.total_users span')[4]).animate({top: '-=15', opacity: 1.0 },500, function(){$(this).remove()});
}

var addThousandSeparator = function (nStr) {
    nStr += '';
    x = nStr.split('.');
    x1 = x[0];
    x2 = x.length > 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1;
}

var loadTwitter = function () {
    $.get('/feeds/twitter', function (data) {
        var list = $("<ul></ul>");
        var tweets = JSON.parse(data).statuses;
        for (i in tweets) {
            var tweet = $("<li></li>")
                .addClass('tweet')
                .html('<div class="message">' + tweets[i].text.replace(new RegExp('(https?://\\S+)', 'g'), '<a href="$1">$1</a>').replace(new RegExp('@([\\w]+)', 'g'), '<a href="https://web.archive.org/web/20140201105119/https://twitter.com/#!/$1">@$1</a>') + '</div><a class="timestamp" href="https://web.archive.org/web/20140201105119/http://twitter.com/#!/jeb_/status/' + tweets[i].id_str + '">' + $.timeago(tweets[i].created_at) + '</a>')
                .appendTo(list);
        }
        $('#twitter div').html("").append(list);
    });
}

var loadFacebook = function () {
    $('#facebook .fbarea').html('<iframe src="https://web.archive.org/web/20140201105119/https://www.facebook.com/plugins/likebox.php?href=http%3A%2F%2Fwww.facebook.com%2Fminecraft&amp;width=300&amp;colorscheme=dark&amp;connections=10&amp;stream=false&amp;header=false&amp;height=255" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:300px; height:255px;" allowTransparency="true"></iframe>');
}

var loadTumblr = function () {
    $.get('/feeds/tumblr', function (data) {
        var posts = JSON.parse(data).posts, list = $("<ul></ul>"), i;
        for (i in posts) {
            if (list.children(".tumblr").length >= 5) {
                break;
            }
            if (posts[i]['regular-title']) {
                var post = $("<li></li>")
                    .addClass('tumblr')
                    .html('<a class="title" href="' + posts[i]['url-with-slug'] + '">' + posts[i]['regular-title'] + '</a><div class="timestamp">' + $.timeago(posts[i].date) + '</div>')
                    .appendTo(list);
            }
        }
        $('#tumblr div').html("").append(list);
    });
}

var oc = function (a) {
    var o = {};
    for (var i = 0; i < a.length; i++) {
        o[a[i]] = '';
    }
    return o;
}

var mailcheck = function (inputFieldSelector) {
    $(document).delegate('.replaceEmail', 'click', function (e) {
        $(inputFieldSelector).val($(this).attr('email-suggestion'));
        $('.emailSuggestion').remove();
        e.preventDefault();
        return false;
    });

    $(inputFieldSelector).blur(function () {
        $(this).mailcheck({
            domains: ["hotmail.com",
                "gmail.com",
                "yahoo.com",
                "web.de",
                "hotmail.fr",
                "hotmail.co.uk",
                "mail.ru",
                "aol.com",
                "live.com",
                "wp.pl",
                "gmx.de",
                "naver.com",
                "hotmail.de",
                "seznam.cz",
                "o2.pl",
                "googlemail.com",
                "comcast.net",
                "yahoo.de",
                "msn.com",
                "yandex.ru",
                "live.co.uk",
                "comcast.net",
                "hotmail.de",
                "yahoo.de",
                "ymail.com",
                "seznam.cz",
                "me.com",
                "mac.com",
                "yahoo.co.uk"],
            suggested: function (element, suggestion) {
                $('.emailSuggestion').remove();
                var $suggestion = $('<div>').addClass('emailSuggestion');
                $suggestion.append('Did you mean ');

                var link = $('<a>', {href: '#'}).addClass('replaceEmail').attr('email-suggestion', suggestion.full);
                link.append($('<span>', {text: suggestion.address + '@'}).addClass('address'));
                link.append($('<span>', {text: suggestion.domain}).addClass('domain'));

                $suggestion.append(link);
                $suggestion.append('?');

                $suggestion.insertAfter($(element));
            },
            empty: function (element) {
                $('.emailSuggestion').remove();
            }
        });
    });
};

$(document).ready(function () {
    var location = window.location.pathname;

    var mainclasses = $('#main').attr('class').split(' ');
    for (var i = 0; i < mainclasses.length; i++) {
        var mainclass = mainclasses[i];
        if (mainclass.match(/(path_|verb_)/)) {
            $('#main').removeClass(mainclass);
        }
    }
    $('#main').addClass("path_" + location.toString().replace(/[^0-9a-zA-Z]/g, ""));
    //        $('#main').addClass("verb_" + app.last_route.verb);

    $('#menu > li').bind('mouseover', dropdownOpen);
    $('#menu > li').bind('mouseout', dropdownTimer);

    // Specific locations
    if (location == "/") {
        loadFacebook();
        loadTwitter();
        loadTumblr();
        if (typeof justLoggedIn != 'undefined' && justLoggedIn) {
            _gaq.push(['_trackEvent', 'Account', 'Login-completed', 'Minecraft']);
        }
        var statsTicker = window.setInterval(updateStats, 1000);

        $('#hideJapanesePush').click(function (e) {
            setCookie("hideJapanesePush", 1, 90);
            $('#japanesePush').fadeOut(150);
            e.preventDefault();
            return false;
        });
    } else if (location == "/download" || location == '/complete') {
        $('#platform-all').click(function (event) {
            event.preventDefault();
            $('.platform').show();
            $(this).remove();
            return false;
        });
        if (typeof operating_system !== 'undefined') {
            $('#platform-' + operating_system).show();
        } else {
            $('.platform').show();
        }
        $('.download-link').click(function (e) {
            var link = $(e.currentTarget);
            var dist = link.attr('data-dist');
            var platform = link.attr('data-platform');
            _gaq.push(['_trackEvent', 'Downloads', 'Download-' + dist, platform]);

            return true;
        });

        $('#platform-old').click(function (event) {
            $(this).remove();
            $('#old-downloads').show();
            event.preventDefault();
            return false;
        });
    } else if (location == "/classic/list") {
        var durToTime = function (dur) {
            var regex = /(\d+)([dhms])/;
            var match = regex.exec(dur);
            var type = match[2];
            if (type == "s") {
                return match[1];
            } else if (type == "m") {
                return match[1] * 60;
            } else if (type == "h") {
                return match[1] * 60 * 60;
            } else if (type == "d") {
                return match[1] * 60 * 60 * 24;
            }
        }
        $.fn.dataTableExt.oSort['duration-asc'] = function (x, y) {
            return ((durToTime(x) < durToTime(y)) ? -1 : ((durToTime(x) > durToTime(y)) ? 1 : 0));
        };

        $.fn.dataTableExt.oSort['duration-desc'] = function (x, y) {
            return ((durToTime(x) < durToTime(y)) ? 1 : ((durToTime(x) > durToTime(y)) ? -1 : 0));
        };
        $('#servers').dataTable({
            "aaSorting": [
                [ 3, "desc" ]
            ],
            "aoColumns": [
                null,
                null,
                null,
                {
                    "sType": "duration"
                },
                null
            ]
        });
    } else if (location == "/store") {
        $.ajax({
            url: 'https://web.archive.org/web/20140201105119/https://s3.amazonaws.com/minecraft-net-store-inventory/data.json',
            dataType: 'jsonp',
        });

        $('#store-frame').load(function () {
            loadMessageFrame();
        });
    } else if (location == "/user/redeem") {
        $('#redeemForm #code').keyup(function (event) {
            if ($('#redeemForm #code').val().length != oldCodeLength) {
                formatCode($('#redeemForm #code'));
                oldCodeLength = $('#redeemForm #code').val().length;
            }
        });
    } else if (location == '/challenge') {
        var container = $('#confirm');

        $('#challengeForm').validate({
            rules: {
                answer: {
                    required: true
                }
            },
            messages: {
                answer: {
                    required: 'You need to answer the question.'
                }
            },
            highlight: highlightInvalid,
            unhighlight: unhighlightValid,
            submitHandler: function (form) {
                var $form = $(form);
                if (!$form.hasClass('submitted')) {
                    $form.addClass('submitted');
                    $form.find('button').hide();
                    $('<span>', {id: 'loader', html: 'Confirming identity&hellip;'}).appendTo($form);
                    $form.ajaxSubmit({
                        success: function (response) {
                            if (isDefined(response.error)) {
                                showError(container, response.error);
                            } else {
                                if (typeof redirectUrl !== 'undefined' && redirectUrl.length > 0) {
                                    window.location.href = redirectUrl;
                                } else {
                                    container.empty().append($('<p>', {text: 'Good! Your identity has been confirmed. You are now free to log in to your Mojang games from this computer. Have fun!'}).addClass('flash').addClass('success')).append($('<p>').append($('<a>', {text: 'Go to profile', href: '/profile'})));
                                }
                            }
                            $form.removeClass('submitted');
                        },
                        error: function () {
                            flashError('An error occurred. Please try again later.', container);
                            $form.removeClass('submitted');
                        }
                    });
                }
            }
        });
    } else if (location.match(/\/verifyemail/)) {
        if (typeof justRegistered != 'undefined' && justRegistered) {
            _gaq.push(['_trackEvent', 'Account', 'Registration-completed', 'Minecraft']);
        }
    } else if (location.match(/\/store\/minecraft/)) {
        _gaq.push(function() {
            var pageTracker = _gat._getTrackerByName();
            var iframe = document.getElementById('store-frame');
            iframe.src = pageTracker._getLinkerUrl(framedStoreSrc);
        });
    } 
    if (location === '/complete') {
        trackEvent('Sales2', 'Purchased-complete', 'Minecraft-PC' + (isGift === true ? '' : '_Gift-Code'));
    }
});



}
/*
     FILE ARCHIVED ON 10:51:19 Feb 01, 2014 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:51:20 Sep 19, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 1.926
  exclusion.robots: 0.034
  exclusion.robots.policy: 0.022
  esindex: 0.024
  cdx.remote: 49.085
  LoadShardBlock: 76.122 (3)
  PetaboxLoader3.datanode: 104.017 (5)
  load_resource: 336.549 (2)
  PetaboxLoader3.resolve: 280.29 (2)
*/